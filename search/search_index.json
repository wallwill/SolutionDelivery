{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Solution Delivery Documentation","text":"<p>If your starting a solution architecture practice or looking to put some structure to a federated architecture community this might be the site to help get started.</p>"},{"location":"#about","title":"About","text":"<p>A collection of solution delivery material from experience of global delivery environments at fortune top 20 healthcare providers.</p>"},{"location":"#general-philosophy","title":"General Philosophy","text":"<ul> <li>Pragmatic 'Just enough Architecture'. </li> <li>Influence without Authority. </li> <li>Build 'Fit for purpose'.</li> <li>Always lookup first and maximize Reuse.</li> </ul>"},{"location":"adrs/","title":"Architecture Decision Records","text":"<p>An Architecture Decision Record (ADR) is a document that captures an important architectural decision made along with its context and consequences. Overarching principle is that ADRs should be context aware and demonstrate due diligence and critical analysis has been applied.</p> <p>For the Enterprise , ADRs will give visibility to decisions that are typically made in meetings without record. As time passes, these are quickly forgotten as to the why of the meeting and who made them.   If implemented in such a way as to be correlated to entities of significance such as an Project ID or Application ID then reports can be generated which show the historical progression of an Architecture through its lifecycle and the decisions that went with it.</p> <p>For the Architects and Application Teams, it expedites decision making through federated accountability while keeping technical decisions of significance closer to the project and execution teams. </p> <p>Learn more:https://adr.github.io/</p>"},{"location":"assesment/","title":"Scoring Criteria for Peer Review","text":""},{"location":"assesment/#general-guidelines","title":"General Guidelines","text":"<ul> <li>If a program exhibits criteria from multiple ratings on the scale, review members should use their judgment to determine which criteria are more important for the architecture being reviewed and provide a rating accordingly. Keep it simple and avoid over-engineering the scoring process.</li> <li>If any tech strategy is not applicable to the architecture/investment being reviewed, rate it as 3, the same as acceptable strategic alignment.</li> <li>Use these criteria as guidelines. Reviewers should use their best judgment to provide an objective rating for the architecture, as not every possible scenario might be covered within the criteria.</li> </ul>"},{"location":"assesment/#what-does-rate-1-5-signify","title":"What Does Rate 1-5 Signify?","text":"Rating Significance 1 Lacks Strategic Alignment 2 Deviates from Strategy 3 Acceptable Strategic Alignment 4 Good Strategic Alignment 5 Best Strategic Alignment"},{"location":"assesment/#modernization","title":"Modernization","text":"Score Criteria 1 - New or unmodified monolithic application - Application does not scale - Architecture inhibits ability to make core data accessible through data externalization techniques - Not aligned to the criteria for Modern APIs and API standards with a critical severity rating of &gt;3000ms P95 latency - No AI best practices met 2 - New or unmodified monolithic application - Application scales vertically - No plans to make core data accessible through data externalization techniques. - Somewhat aligned to the criteria for Modern, API standards with a high severity rating of &gt;1000ms but &lt;3000ms P95 latency - 1-5 AI best practices met; team has no plan to meet outstanding 3 - Minor enhancements to monolithic application, majority microservices cloud architecture. - Majority cloud native architecture, Application scales both vertically and horizontally with manual intervention - Plans in place to make core data accessible through data externalization techniques. - Targeted to align to the criteria for Modern API standards with a medium severity rating of &gt;500ms but &lt;1000ms P95 latency - 1-5 AI best practices met, team has plan to meet outstanding or 6-10 AI best practices met, team has no plan to meet outstanding 4 - Transitioning towards a full microservices, cloud-based architecture - Using CI/CD, automation for build/deploy but testing not fully automated - Transitioning towards full cloud native architecture, Application scales both vertically and horizontally with partial automation - Core data accessible through data externalization techniques - Aligned to the criteria for Modern API standards with a low severity rating of &gt;200ms but &lt;500ms P95 latency soon to be reported within Enterprise Advisor - 6-10 AI best practices met, team has plan to meet outstanding 5 - Cloud-based architecture (Cloud native and failure mgmt. Containers. Based on Domain Driven Design and Microservice Architecture, Infra as code) - Full cloud native architecture, Application scales both vertically and horizontally with full automation - Recognized as key contributor, maintainer and/or reviewer for 3rd party contributions Core data accessible through data externalization techniques, aligned with and promoting use of Enterprise core architecture - Building technology asset using emerging technologies for enterprise reuse - Aligned to the criteria for Modern API standards with a goal rating of &lt;200ms P95 latency as reported by Enterprise Advisor - All AI best practices met"},{"location":"assesment/#reuse-simplify","title":"Reuse &amp; Simplify","text":"Score Criteria 1 - Increase in TCO and addition to technical or architectural debt - Not a core API, internal API solving one business use case - No reuse of core API or core asset - Duplication of function and/or data of an existing Enterprise Capability but for a different data set/domain/sales context - No method of publishing capability backlog (Aha!) - No contribution to inner source - No code/config/lifecycle segregation of Line of Business (LoB) specific functionality from core common capabilities - Uses Discouraged or Unacceptable technologies - Significantly adds to the duplication of data, duplication of code bases, and/or duplication of security-related context/attributes - No metadata or capability publication to enterprise solutions 2 - Inherits existing technical or architecture debt with minor incremental additions to debt - Not a core API, internal API solving multiple business use cases - No reuse of core API or core asset - No contribution to inner source - Transitioning to publishing product backlog - Limited duplication of data, no duplication/forking of code, no duplication of security-related context/attributes - No metadata or capability publication to enterprise solutions 3 - Inherits existing technical or architecture debt with minor incremental additions to debt - Not a core API, internal API solving multiple business use cases - No reuse of core API or core asset - No contribution to inner source - Transitioning to publishing product backlog - Limited duplication of data, no duplication/forking of code, no duplication of security-related context/attributes - Limited metadata publication to enterprise solutions 4 - Significant (or net) reduction to technical or architectural debt, OR significant reductions in duplication of existing function - Not a core API, internal API solving multiple business use cases - Core enterprise asset - Reuse of core API - Contributing to inner source - Transition towards exposing data and functionality as API streams, not all sources streaming - Transition towards exposing/consuming product/application agnostic Business Events to the Enterprise ecosystem - Primarily leveraging Preferred technologies 5 - Decommissioning of existing assets directly reducing Total Cost of Ownership and Technical Debt - Is a core API, can be reused by other applications - Core enterprise asset - Producing and contributing to streams - No duplication of data from Enterprise capabilities - Product/Application agnostic Business Events published to Enterprise Consumers - Contribution to inner source - Fully matured federated product and federated software development lifecycle - Fully enterprise viewable federated product capability backlog with regular cadence of product council review, prioritization, and feature governance"},{"location":"assesment/#data-management","title":"Data Management","text":"<p>(Note: Assumption here of an Enterprise Data Catalog)</p> Score Criteria 1 - Data Governance: Data usage and rights have been mainly ignored. What's a data steward? Business owner/stakeholders are not at the table for decisions. Unnecessarily duplicates data (tables) and repositories. Datasets (raw metadata) do not exist in the Enterprise Catalog. - Metadata Management: There is no capture of any metadata in the solution. - Data Quality: Data quality characteristics are not understood for data repositories present in this solution. No DQ exception processing has been considered. Enterprise capability is ignored, and actions are taken based on inputs from consumer and downstream applications. - Data Orchestration &amp; Integration: Job scheduling and pipeline orchestration have not been considered. Existing Data Products have not been considered with no intent to build a new one. The data pipeline uses unacceptable tools. Failure points and impacts on downstream processes undefined. Requirements for data pipeline latency, throughput, and elasticity are not defined. No RPO or RTO defined. - Information Model: Missed opportunities to employ canonical data; no roadmap to remediate; accesses source system data directly. - Data Privacy: Data at rest or in transit is never encrypted, or sensitive data (PHI/PII) is not masked/de-identified/tokenized. Enterprise capability is ignored. - Reporting &amp; Analytics: Solution ignores reporting and analytics considerations. - Data Repositories: Scalability, reliability, serviceability, performance, fault-tolerance, availability, and capacity for the solution are ignored. Solution fails when data repositories are unavailable. Site availability less than 80%. No auto scalability, unmet SLAs, no DR or forecast plan. - Reference Data: Reference data traditionally ignored, leading to duplicate, outdated, and inaccurate data instances with multiple licenses, incurring cost. 2 - Data Governance: Datasets with raw metadata are available on the Enterprise Data Catalog with enforced metadata by contract. Some data usage and rights criteria reviewed. Ad-hoc data steward available. Sporadic stakeholder involvement. Some duplicative outcome for the enterprise. - Metadata Management: Capture of existing production technical or business metadata exists in a non-preferred data catalog. - Data Quality: Data quality characteristics understood for major repositories; minor DQ exception processing considered. Enterprise capabilities acknowledged but not engaged. Focus is on ETL-based DQ check or manual QA team queries. - Data Orchestration &amp; Integration: Minimal job scheduling and pipeline orchestration, with discouraged tools. Some failure points addressed. Requirements for latency, throughput, and elasticity partially defined. RPO and RTO defined but viability unclear. - Information Model: Missed opportunities to employ canonical data; remediation roadmap in place; accesses source system data directly. 3 - Data Governance: Datasets with raw metadata and some enrichments available on the Enterprise Catalog. Informally reviewed data usage and rights criteria. Ad-hoc data steward available with some stakeholder processes. Less duplicative outcome for the enterprise. - Metadata Management: Existing production technical metadata used to populate a dataset in the Enterprise Data Platform with some business metadata (e.g., data steward, definitions). - Data Privacy: Sensitive data at rest or in transit is masked/de-identified/tokenized. Enterprise capabilities assessed. - Data Orchestration &amp; Integration: Minor job scheduling and orchestration with minor automation. Some existing Data Products leveraged. Pipeline uses acceptable tools. Most failure points addressed. Defined latency, throughput, and elasticity requirements, albeit viability is unclear. - Information Model: Some use of canonical data where appropriate; does not access source system data directly. - Data Quality: Some data quality characteristics understood for some repositories. Some DQ processing considered. Enterprise capabilities evaluated. - Reporting &amp; Analytics: Solution considers major reporting and analytics elements. Enterprise capabilities assessed. - Data Repositories: Some focus on scalability, reliability, and other metrics. Site availability 85-90%. Auto-scaling exists with generally met SLAs. Some performance metrics captured periodically, with DR and forecast planning in place. - Reference Data: Datasets available on the Enterprise Data Catalog for public healthcare and endorsed business standards, including technical and business metadata for healthcare reference data licensed by other units. 4 - Data Governance: Asset available on the Enterprise Data Catalog as Data Product(s) with robust enrichments. Subscription requests reviewed within the Data Platform Catalog. Access manually provisioned. Minimum duplicative outcome for the enterprise. - Metadata Management: Production metadata used in a full-function suite in the Data Platform with data lineage and manual enrichment. - Data Quality: Well-understood data quality characteristics for key repositories. Happy-path DQ processing evident. Enterprise capabilities included in plan. - Data Orchestration &amp; Integration: Good job scheduling and automation support. Existing Data Products leveraged. Some preferred tools used. Most failure points addressed and recovery plans considered. Defined latency, throughput, and elasticity requirements. RPO and RTO plans developed. - Information Model: Good use of canonical data; does not access source system data directly. - Data Privacy: Sensitive data both at rest and in transit masked/de-identified/tokenized. Enterprise capabilities planned. - Reporting &amp; Analytics: Reporting and analytics integral to the solution, with enterprise capabilities planned. - Data Repositories: Significant attention to metrics like scalability and availability, surviving short-term outages. Numerous dashboards for metrics. Site availability 90-95%. Auto-scaling solutions mostly meeting SLAs with RCAs on discrepancies. - Reference Data: Subscription requests reviewed by Data Product Owners; reference data access managed by the reference management team via the HPC Data Platform. 5 - Data Governance: Asset available on the Enterprise Data Catalog as Data Product(s) with extensive metadata enrichments. - Metadata Management: Metadata populates a full-function suite with comprehensive lineage and automated enrichment using Enterprise classification tools. - Data Quality: Comprehensive understanding of data quality characteristics, including profiling and DQ exception processing. - Data Orchestration &amp; Integration: Automated job scheduling and orchestration. Existing and new reusable Data Products. Uses all preferred tools. All failure points addressed. Defined latency, throughput, and elasticity requirements with evidence of achievement, including RPO/RTO design. - Information Model: Excellent use of canonical data, strengthening existing definitions; avoids direct system data access. - Data Privacy: Sensitive data both at rest and in transit masked/de-identified/tokenized. Enterprise capabilities engaged as needed. - Data Integration, Reporting &amp; Analytics: Comprehensive account in architecture with engaged enterprise capabilities. - Data Repositories: Robust solutions with metrics captured via dashboards, monitoring, and alerts. All SLAs tracked, with comprehensive planning for scalability, fault-tolerance, and capacity. - Reference Data: All subscription requests are reviewed within the Enterprise Data Platform Catalog by Data Product Owners."},{"location":"assesment/#security","title":"Security","text":"Score Criteria 1 - Less than 59% of applications use enterprise capability for identity and access management - Less than 59% of applications use enterprise capability for source code management and infrastructure as code - Less than 59% of applications use enterprise-approved encryption methods for data at rest and data in transit - Less than 59% of applications have logging and monitoring in place using enterprise capability - Less than 59% remediation of Severe, Critical, and High violations for all applicable vulnerabilities scans according to application risk category (Static, Dynamic, Pen Test) - Less than 59% of applications have appropriate network controls in place for segmentation, endpoint protection, and defense in depth 2 - 60% - 69% of applications use enterprise capability for identity and access management - 60% - 69% of applications use enterprise capability for source code management and infrastructure as code (GitHub) - 60% - 69% of applications use enterprise-approved encryption methods for data at rest and data in transit - 60% - 69% of applications have logging and monitoring in place using enterprise capability - 60% - 69% of remediations for Severe, Critical, and High violations for all applicable vulnerabilities scans according to application risk category (Static, Dynamic, Pen Test) - 60% - 69% of applications have appropriate network controls in place for segmentation, endpoint protection, and defense in depth 3 - 70% - 79% of applications use enterprise capability for identity and access management - 70% - 79% of applications use enterprise capability for source code management and infrastructure as code - 70% - 79% of applications use enterprise-approved encryption methods for data at rest and data in transit - 70% - 79% of applications have logging and monitoring in place using enterprise capability - 70% - 79% remediation of Severe, Critical, and High violations of all applicable vulnerabilities according to application risk category (Static, Dynamic, Pen Test) - 70% - 79% of applications have appropriate network controls in place for segmentation, endpoint protection, and defense in depth 4 - 80% - 90% of applications use enterprise capability for identity and access management - 80% - 90% of applications use enterprise capability for source code management and infrastructure as code - 80% - 90% of applications use enterprise-approved encryption methods for data at rest and data in transit - 80% - 90% of applications have logging and monitoring in place using enterprise capability - 80% - 90% remediation of Severe, Critical, and High violations of all applicable vulnerabilities according to application risk category (Static, Dynamic, Pen Test) - 80% - 90% of applications have appropriate network controls in place for segmentation, endpoint protection, and defense in depth 5 - 100% of applications use enterprise capability for identity and access management - 100% of applications use enterprise capability for source code management and infrastructure as code - 100% of applications use enterprise-approved encryption methods for data at rest and data in transit - 100% of applications have logging and monitoring in place using enterprise capability - 100% remediation of Severe, Critical, and High violations of all applicable vulnerabilities according to application risk category (Static, Dynamic, Pen Test) - 100% of applications have appropriate network controls in place for segmentation, endpoint protection, and defense in depth <pre><code>                                                                                                     |\n</code></pre>"},{"location":"assesment/#consumer-experience","title":"Consumer Experience","text":"Score Criteria 1 - Stakeholder experience is not seamless or personalized, leading to a negative NPS for the product or solution - Outreach to end constituents (e.g., via email, SMS) is not aligned to standards, outmoded (e.g., paper, fax), and is not documented or coordinated across business LoBs - Experiences are created in a bespoke fashion based on modality (e.g., web only), not allowing seamless leverage across various devices (mobile, tablet, etc.) - Significant increase to TCO in the short or long term with no new capabilities - Solution architecture and development process does not enable quick delivery of business value (more than 9-12 months) - Solution does not use common components to provide a consistent experience - Solution does not tag and track experience 2 - Stakeholder experience is less than seamless or personalized, potentially leading to a negative NPS for the product or solution - Outreach to end constituents (e.g., via email, SMS) is not aligned to standards and is not documented or coordinated across business LoBs - Experiences are not fully multimodal in nature - No impact to TCO - Solution architecture and development process enables delivery of business value (less than 9 months), but iteration speed to assess, measure, and adjust experience is slow (&gt;4 weeks) - Solution uses one or two common components to provide a consistent experience but could use more and has apparent experience deficiencies - Solution tags and tracks experience without using standard RUM and consumer journey tracking solutions 3 - Incremental experience design leading to a more personalized or seamless experience in the long-term, improving NPS in the long run - Outreach to end constituents (e.g., via email, SMS) is aligned to standards but may not be fully documented or coordinated across all business LoBs - Experiences are designed to be multimodal but may not be optimized for all modalities (e.g., sub-par mobile experience) - Reduces TCO in less than 18 months - Solution architecture and development process enables quick delivery of business value (less than 4 months), with moderate iteration speed (2-4 weeks) - Solution uses common components to provide a consistent experience but could use more, with minor experience deficiencies - Solution tags and tracks most of the experience using enterprise standard RUM and consumer journey tracking solutions 4 - Experience design leading to a more personalized or seamless experience in the short-term, improving NPS in the long run - Outreach to end constituents (e.g., via email, SMS) is aligned to standards, fully documented, and coordinated for a given business - Experiences are designed to be multimodal and optimized across modalities - Reduces TCO in the near future - Solution architecture and development process enables quick delivery of business value (less than 2 months), with quick iteration speed (&lt;2 weeks) - Solution uses common components to provide a consistent experience at every opportunity - Solution tags and tracks experience using enterprise standard RUM and consumer journey tracking solutions 5 - Experience design leading to a highly personalized or seamless experience in the immediate term, significantly improving NPS in the short run - Outreach to end constituents (e.g., via email, SMS) is aligned to standards, fully documented, and coordinated across the enterprise - Experiences are designed to be multimodal and optimized across modalities - Significantly reduces TCO in the near future - Solution architecture and development process enables quick turnaround (less than 1 month), with fast iteration speed (&lt;3 days) - Solution uses common components to provide a consistent experience at every opportunity - Solution tags and tracks experience using enterprise standard RUM and consumer journey tracking solutions <pre><code>   ## Engineering Excellence\n</code></pre> Score Criteria 1 - Engineering Culture: Less than 40% of program engineers contribute meaningful code in GitHub over a 30-day period - Engineering Culture: Less than 60% of eligible program source code repositories are in GitHub Enterprise Cloud - Performance &amp; Accountability: Less than 30% of applications have respective Vital Business Functions (VBF) identified, mapped, monitored with availability probes, and integrated into Enterprise Advisor for reporting - Open Source Software and Technology: &lt;30% of technologies implemented are Preferred open source solutions - Open Source technologies are not registered to the applications or compliant with licensing - Program team has not contributed to any open source projects leveraged in the solutions 2 - Engineering Culture: 40-49% of program engineers contribute meaningful code in GitHub over a 30-day period - Engineering Culture: 60% of eligible program source code repositories are in GitHub Enterprise Cloud - Performance &amp; Accountability: 30% or more applications have respective VBF identified, mapped, monitored with availability probes - Open Source Software and Technology: 30% of technologies implemented are Preferred open source solutions - Open Source technologies are not registered to the applications or compliant with licensing - Program team has not contributed code, docs, or feedback to the open source projects leveraged in the solutions 3 - Engineering Culture: 50-54% of program engineers contribute meaningful code in GitHub over a 30-day period - Engineering Culture: 70% of eligible program source code repositories are in GitHub Enterprise Cloud - Performance &amp; Accountability: 40% or more applications have respective VBF identified, mapped, monitored with availability probes, and integrated into Enterprise Advisor for reporting - Open Source Software and Technology: 50% of technologies implemented are Preferred open source solutions - Open Source technologies are registered to the applications or program in Barista and compliant with licensing - Program team has contributed code, docs, or feedback to one or more open source projects leveraged in the solutions 4 - Engineering Culture: 55-59% of program engineers contribute meaningful code in GitHub over a 30-day period - Engineering Culture: 80% of eligible program source code repositories are in GitHub Enterprise Cloud - Performance &amp; Accountability: 50% or more applications have respective VBF identified, mapped, monitored with availability probes, and integrated into Enterprise Advisor for reporting - Open Source Software and Technology: 65% of technologies implemented are Preferred open source solutions - Open Source technologies are registered to the applications and compliant with licensing - Aspects of the program are released as open source - Program team has contributed code or docs to one or more open source projects leveraged in the solution(s) 5 - Engineering Culture: 60% of program engineers contribute meaningful code in GitHub over a 30-day period - Engineering Culture: 90% of eligible program source code repositories are in GitHub Enterprise Cloud - Performance &amp; Accountability: 60% or more applications have respective VBF identified, mapped, monitored with availability probes - Open Source Software and Technology: 80% of technologies implemented are Preferred open source solutions - Open Source technologies are registered to the applications and compliant with licensing - Aspects of the program are released as open source - Program team has contributed code, docs, and feedback to one or more open source projects leveraged in the solution(s)"},{"location":"cloudArch/","title":"Cloud Well Architected Frameworks","text":""},{"location":"cloudArch/#cloud-well-architected-framework-comparison","title":"\u2601\ufe0f Cloud Well-Architected Framework Comparison","text":"Pillar / Focus Area AWS Well-Architected Framework Azure Well-Architected Framework GCP Architecture Framework Operational Excellence \u2705 Focuses on operations, monitoring, and automation for consistent improvement. \u2705 Emphasizes process efficiency, deployment, and governance. \u2705 Promotes DevOps, automation, and proactive monitoring. Security \u2705 Protects data, systems, and assets using layered defense and identity control. \u2705 Prioritizes data protection, access control, and threat defense. \u2705 Encourages zero-trust security and compliance automation. Reliability \u2705 Ensures workload resiliency, fault tolerance, and recovery. \u2705 Focuses on availability, recovery, and disaster resilience. \u2705 Addresses fault tolerance, recovery, and redundancy. Performance Efficiency \u2705 Optimizes resources for workload performance and scalability. \u2705 Guides performance tuning and resource optimization. \u2705 Improves workload efficiency and performance metrics. Cost Optimization \u2705 Manages cost through monitoring, resource rightsizing, and efficiency. \u2705 Helps balance performance and cost with budgeting insights. \u2705 Encourages sustainable cost management and visibility. Sustainability \u2705 Reduces environmental impact of workloads and resource usage. \u26aa Not a core pillar (integrated across other pillars). \u2705 Explicitly promotes carbon-aware computing and sustainability."},{"location":"cloudArch/#summary","title":"\ud83e\udded Summary","text":"<p>All three major cloud providers \u2014 AWS, Azure, and Google Cloud Platform (GCP) \u2014 offer Well-Architected Frameworks that provide structured best practices for building secure, resilient, and efficient cloud systems. While the core principles overlap, each provider tailors its guidance to align with its ecosystem and tooling. AWS emphasizes structured reviews and automation, Azure integrates governance and management capabilities, and GCP focuses heavily on sustainability and data-driven operations.</p>"},{"location":"cloudArch/#official-documentation","title":"\ud83d\udd17 Official Documentation","text":"<ul> <li>AWS Well-Architected Framework</li> <li>Azure Well-Architected Framework</li> <li>Google Cloud Architecture Framework</li> </ul>"},{"location":"communications/","title":"Communications","text":""},{"location":"communications/#objectives-alignment","title":"Objectives Alignment","text":"<p>Ensure alignment of communication efforts with the overarching goals of focusing on promoting alignment between business and technology strategies and facilitating efficient solution delivery, while considering the global audience's needs.</p>"},{"location":"communications/#audience-segmentation","title":"Audience Segmentation","text":"<p>Recognize the diversity within the global audience, considering different time zones, cultural backgrounds, and communication preferences. Segment the audience into:</p> <ul> <li>Executives responsible for business and technology strategy</li> <li>Delivery teams involved in solution implementation</li> </ul>"},{"location":"communications/#platform-selection","title":"Platform Selection","text":"<ul> <li>SharePoint: Use SharePoint, where appropriate, as a centralized repository for EA artifacts relating to IP/R&amp;D, ensuring accessibility to all global teams. Organize information logically and provide clear navigation for easy access.</li> <li>Wiki: Utilize a Wiki for collaborative documentation, enabling teams across time zones to contribute asynchronously. Foster a culture of knowledge sharing and transparency.</li> <li>Microsoft Teams: Leverage Teams for real-time collaboration and discussions, but be mindful of scheduling meetings across time zones. Encourage the use of asynchronous communication features such as chat and threaded discussions.</li> <li>Email: Reserve email for formal communications and important updates, considering the appropriate timing to reach a global audience effectively.</li> </ul>"},{"location":"communications/#timing-considerations","title":"Timing Considerations","text":"<ul> <li>Schedule synchronous meetings and real-time discussions at times that accommodate the majority of the global audience, rotating meeting times periodically to ensure inclusivity.</li> <li>Encourage asynchronous communication for non-urgent matters, allowing team members to contribute and respond at their convenience.</li> </ul>"},{"location":"communications/#when-to-use-each-platform","title":"When to Use Each Platform","text":"<ul> <li>SharePoint and Wiki: Provide 24/7 access to documentation and resources, allowing teams to collaborate and access information at any time suitable for them.</li> <li>Microsoft Teams: Utilize for both synchronous and asynchronous communication, leveraging features such as chat, channels, and threaded discussions to facilitate ongoing collaboration across time zones.</li> <li>Email: Use email for formal announcements, updates, and important notifications, considering the timing to reach the widest possible audience effectively.</li> </ul>"},{"location":"communications/#why-use-each-platform","title":"Why Use Each Platform","text":"<ul> <li>SharePoint and  Wiki: Serve as accessible repositories for documentation and resources, enabling global teams to collaborate and access information at their convenience.</li> <li>Microsoft Teams: Facilitate real-time collaboration and discussions, bridging the gap between geographically dispersed teams and fostering a sense of connectedness.</li> <li>Email: Provide a formal channel for important communications, ensuring that critical updates reach all stakeholders regardless of time zone differences.</li> </ul>"},{"location":"communications/#pull-versus-push-strategies","title":"Pull versus Push Strategies","text":"<p>Encourage a balanced approach between pull and push strategies, allowing team members to access information on SharePoint and Confluence Wiki at their convenience while using Microsoft Teams and email for timely updates and notifications.</p>"},{"location":"communications/#training-and-support","title":"Training and Support","text":"<p>Provide training and resources on effective asynchronous communication and time management techniques, emphasizing the importance of inclusivity and collaboration across time zones.</p>"},{"location":"communications/#feedback-and-iteration","title":"Feedback and Iteration","text":"<p>Solicit feedback from the global audience regularly to evaluate the effectiveness of the communication strategy, making adjustments as needed to better accommodate the diverse needs of teams across different time zones.</p>"},{"location":"design/","title":"Reference Architectures and Design Patterns","text":""},{"location":"design/#overview","title":"Overview","text":"<p>Reference architectures and design patterns are foundational assets within an Architecture Practice. They provide reusable guidance that accelerates solution design, promotes architectural consistency, and aligns delivery teams with enterprise standards.</p>"},{"location":"design/#purpose","title":"Purpose","text":"<ul> <li>Accelerate Delivery: Predefined architectures shorten the time to design and implement solutions by providing proven templates and guidance.</li> <li>Promote Consistency: Ensures that architectures across projects follow established principles, security baselines, and compliance standards.</li> <li>Reduce Risk: Reference architectures encapsulate lessons learned and industry best practices, reducing design errors and rework.</li> <li>Enable Reuse: Common building blocks and patterns encourage reuse across business units and technology domains.</li> <li>Support Governance: Standard architectures form a baseline for architectural review and compliance processes.</li> </ul>"},{"location":"design/#relationship-between-reference-architectures-and-design-patterns","title":"Relationship Between Reference Architectures and Design Patterns","text":"Concept Description Example Reference Architecture A high-level blueprint describing the components, relationships, and principles for a solution domain. \u201cAzure Landing Zone Architecture\u201d, \u201cAWS Multi-Tenant SaaS Reference Architecture\u201d Design Pattern A reusable solution to a recurring design problem within a given context. \u201cRetry Pattern\u201d, \u201cCircuit Breaker\u201d, \u201cEvent Sourcing\u201d, \u201cBulkhead Pattern\u201d <p>Reference architectures define the big picture \u2014 what components exist and how they fit together. Design patterns define the mechanics \u2014 how individual problems are solved consistently across systems.</p>"},{"location":"design/#core-benefits-to-the-practice","title":"Core Benefits to the Practice","text":"<ul> <li>Establishes a common vocabulary among architects and engineers.</li> <li>Provides reference implementations with infrastructure-as-code (IaC) for hands-on reuse.</li> <li>Enables architectural governance by aligning project designs to validated patterns.</li> <li>Serves as the foundation for automation and platform engineering initiatives.</li> </ul>"},{"location":"design/#curated-resources","title":"Curated Resources","text":""},{"location":"design/#cloud-provider-reference-architectures","title":"\ud83c\udf29\ufe0f Cloud Provider Reference Architectures","text":""},{"location":"design/#microsoft-azure","title":"Microsoft Azure","text":"<ul> <li>Azure Architecture Center \u2014 Comprehensive library of Azure reference architectures, patterns, and guidance.</li> <li>Azure Reference Architectures (GitHub) \u2014 Companion repository with diagrams and IaC samples.</li> <li>Azure Enterprise-Scale Landing Zones \u2014 Reference implementation of enterprise-grade Azure environments.</li> <li>Azure Cloud Design Patterns \u2014 Canonical implementations of common cloud patterns.</li> <li>Azure Generative AI Design Patterns \u2014 Reference implementations for AI/LLM solutions on Azure.</li> </ul>"},{"location":"design/#amazon-web-services-aws","title":"Amazon Web Services (AWS)","text":"<ul> <li>AWS Architecture Center \u2014 Official hub for AWS reference architectures and design patterns.</li> <li>AWS Well-Architected Framework \u2014 Principles and pillars for evaluating solution designs.</li> <li>AWS Security Reference Architecture \u2014 Sample IaC for implementing security best practices.</li> <li>AWS SaaS Reference Architectures \u2014 SaaS multi-tenant architecture blueprints.</li> <li>AWS Service Catalog Reference Architectures \u2014 Prebuilt infrastructure patterns using Service Catalog.</li> </ul>"},{"location":"design/#google-cloud-platform-gcp","title":"Google Cloud Platform (GCP)","text":"<ul> <li>Google Cloud Architecture Framework \u2014 Best practices and principles for secure, scalable, and reliable GCP design.</li> <li>Google Cloud Reference Architectures \u2014 End-to-end architectures for common workloads.</li> <li>GCP Architecture Guides (GitHub) \u2014 Open-source sample architectures and deployment scripts.</li> </ul>"},{"location":"design/#cross-cloud-general-design-patterns","title":"\ud83e\udde9 Cross-Cloud &amp; General Design Patterns","text":"<ul> <li>DovAmir/awesome-design-patterns \u2014 A curated list of software and architectural design patterns.</li> <li>lukemurraynz/awesome-azure-architecture \u2014 Curated Azure architecture resources.</li> <li>GoogleCloudPlatform/awesome-google-cloud \u2014 Tools, libraries, and patterns for GCP.</li> <li>rootsongjc/awesome-cloud-native \u2014 Cloud-native and distributed systems patterns.</li> <li>mzazon/awesome-cloud-projects \u2014 1000+ real-world cloud projects and architecture blueprints.</li> </ul>"},{"location":"design/#recommended-practices-for-your-architecture-team","title":"\ud83c\udfd7\ufe0f Recommended Practices for Your Architecture Team","text":"<ol> <li>Adopt a Repository Model: Store internal reference architectures in a version-controlled Git repository (e.g., <code>org/architecture-library</code>).</li> <li>Standardize Documentation: Use consistent templates for architecture decision records (ADRs) and diagrams (C4 model, UML, or Azure Architecture Icons).</li> <li>Automate via IaC: Provide Terraform or Bicep templates alongside reference diagrams.</li> <li>Review Regularly: Keep reference architectures aligned with new cloud services and organizational policies.</li> <li>Tag and Categorize: Organize patterns by domain \u2014 e.g., Networking, Security, Data, AI, Integration, Observability, etc.</li> </ol>"},{"location":"design/#conclusion","title":"Conclusion","text":"<p>Establishing a robust library of reference architectures and design patterns enables organizations to: - Deliver solutions faster with reduced risk. - Drive architectural alignment and consistency. - Provide a shared foundation for innovation.</p> <p>By leveraging publicly available cloud architecture centers and \u201cawesome\u201d curated lists, architecture teams can evolve their internal knowledge base into a living, evolving source of truth.</p>"},{"location":"diagrams/","title":"Diagram Standards","text":"<p>Inherit any Enterprise standards. However, these standards are often high-level, and implementation teams require more granularity with respect to standards and guidelines.</p> <p>This page will be a living document that advocates for diagrams we will produce for each scope.</p>"},{"location":"diagrams/#theme-4-rs","title":"Theme: 4 R's","text":"<ul> <li>Right Diagram</li> <li>Right Audience</li> <li>Right Channel/Method</li> <li>Right Time</li> </ul>"},{"location":"diagrams/#diagram-families","title":"Diagram Families","text":"<p>Selecting the right diagram is a skill in itself. There are several diagram families to choose from. The most frequently used are listed below. Hopefully you can rely on the skill of your architects to judge the right diagram type for the right audience that conveys the right level of information at the right time. (See 4 R's above)</p> <p>Note: This is not meant to be a prescriptive list, but rather a listing of the most frequently used diagrams.</p>"},{"location":"diagrams/#c4","title":"C4","text":"<ul> <li>System Context Diagram</li> <li>Container Diagram</li> </ul>"},{"location":"diagrams/#uml","title":"UML","text":"<ul> <li>Component Diagram</li> <li>Sequence Diagram</li> </ul>"},{"location":"diagrams/#er","title":"ER","text":""},{"location":"diagrams/#dfd","title":"DFD","text":"<ul> <li>Level 0</li> <li>Level 1</li> </ul>"},{"location":"diagrams/#cloud-diagrams","title":"Cloud Diagrams","text":"<ul> <li>Hybrid</li> <li>Context Dependent</li> </ul>"},{"location":"diagrams/#audiences","title":"Audiences","text":"<ul> <li>US Leadership</li> <li>Irish Leadership</li> <li>Product</li> <li>Data Science</li> <li>Engineering</li> <li>Software Engineers</li> <li>Data Engineers</li> </ul>"},{"location":"diagrams/#published-diagram-must-haves","title":"Published Diagram Must-Haves","text":"<ul> <li>Legend</li> <li>Standard Icons (if CSP)</li> <li>Version history: (v0..n), Date, Author</li> <li>All flows/connectors numbered and footnotes of explanations &amp; change history, where appropriate to do so.</li> <li>If published to Confluence, be published using the Gliffy integration.</li> </ul>"},{"location":"duties/","title":"Scope and Responsibilities - General","text":"<p>Acknowledgements: Alan Mullane</p> <ul> <li>Collaborate with Product Owners/PMs: Define functional and non-functional requirements and prioritize backlog.</li> <li>Collaborate with Business and Architects: Work with solution/enterprise architects to translate business requirements into scalable solution options.</li> <li>Collaborate with Data SMEs: Produce efficient data engineering pipelines.</li> <li>System Analysis: Analyze needs and requirements of existing and proposed systems; develop architectural artifacts for as-is, transitional, and future states.</li> <li>Operational Recommendations: Make recommendations to improve existing solutions in performance, stability, usability, and scalability.</li> <li>Facilitation of Proofs of Concept: Conduct PoCs to evaluate and suggest new technology opportunities (including open source) affecting solution delivery and customer satisfaction.</li> <li>Data Analysis Partnership: Partner with SMEs in data analysis to solve problems and proactively identify and resolve data issues.</li> <li>Enterprise Groups Collaboration: Align with best practices and governance in cloud, responsible AI, data usage rights, and technology governance.</li> </ul> <p>General Outputs:</p> <ul> <li>Architectural Artifacts</li> <li>Architectural Decision Records</li> </ul>"},{"location":"duties/#scope-and-responsibilities-detailed","title":"Scope and Responsibilities \u2013 Detailed","text":""},{"location":"duties/#enterprise-architecture-awareness-and-engagement","title":"Enterprise Architecture (Awareness and Engagement)","text":"<ul> <li>Domain and Data Model Governance</li> <li>Technology and Tools Governance</li> <li>Program Roadmap Alignment</li> </ul>"},{"location":"duties/#cloud-architecture-awareness-and-engagement","title":"Cloud Architecture (Awareness and Engagement)","text":"<ul> <li>Cloud platform setup and governance</li> <li>Cloud Tenant/account/technology/cost governance</li> <li>Multi-Team Cloud Support</li> </ul>"},{"location":"duties/#solution-architecture-actively-involved","title":"Solution Architecture (Actively Involved)","text":"<ul> <li>Review of application domain models, data management, non-functional requirements, security, metrics, monitoring, operational support, and logging</li> <li>System component design and integration, technology and tools identification</li> <li>Architecture blueprints, technical reviews, Proofs of Concept (PoCs), product roadmap alignment</li> </ul>"},{"location":"duties/#product-management-passive-reviewer","title":"Product Management (Passive Reviewer)","text":"<ul> <li>Product Roadmap Definition</li> <li>Use Case Definition</li> <li>Product Solutioning, UI/UX</li> </ul>"},{"location":"duties/#testing-passive-reviewer","title":"Testing (Passive Reviewer)","text":"<ul> <li>Test Plan and Acceptance Criteria</li> <li>Regression and Performance Test Report</li> <li>Quality Assurance</li> </ul>"},{"location":"duties/#development-guiding-role","title":"Development (Guiding Role)","text":"<ul> <li>Data and application/API component design and review</li> <li>Continuous integration, test, and delivery with automated pipelines</li> <li>Code quality and best practices</li> </ul>"},{"location":"duties/#devsecops-passive","title":"DevSecOps (Passive)","text":"<ul> <li>Packaging and release of software</li> <li>Security Governance</li> </ul>"},{"location":"duties/#appendix","title":"Appendix","text":""},{"location":"duties/#levels-of-granularity","title":"Levels of Granularity","text":""},{"location":"duties/#architecture","title":"Architecture","text":"<ul> <li>Enterprise Architecture, Program Roadmap</li> <li>Cloud Architecture</li> <li>Solution Architecture, Product Roadmap</li> <li>Scrum of Scrums, ART</li> </ul>"},{"location":"duties/#product","title":"Product","text":"<ul> <li>Program and Product Planning</li> <li>Requirements gathering and definition</li> <li>Sprint Planning and Sprint Demo review</li> <li>Product sign-off</li> </ul>"},{"location":"duties/#test","title":"Test","text":"<ul> <li>Test Planning</li> <li>Documentation and guides for test tools and testing best practices</li> <li>Integration and regression test execution</li> <li>Regression test sign-off</li> </ul>"},{"location":"duties/#development","title":"Development","text":"<ul> <li>Application and DevOps architecture, component, product and test design, release planning</li> <li>DevOps environment setup, provisioning, and monitoring</li> <li>Component build, deployment, unit and integration tests</li> <li>Daily Scrums, Sprint Planning and Refinement, Technical Reviews, Demos</li> </ul>"},{"location":"duties/#release","title":"Release","text":"<ul> <li>Release and Verification, Deployment Guide, Regression Tests</li> <li>Merge to Master and component versioning</li> <li>Operations and Support, Run Books</li> <li>Release Sign Off</li> </ul>"},{"location":"eta/","title":"Enterprise Technical Architecture, Technology Inventories, and Technical Debt Management","text":""},{"location":"eta/#overview","title":"Overview","text":"<p>Enterprise Technical Architecture (ETA) provides the structural foundation for how technology is selected, standardized, and evolved across an organization. For Solution Architects, understanding ETA \u2014 and managing technology choices, debt, and lifecycle \u2014 is critical to ensuring solutions remain aligned, sustainable, and cost-effective.</p>"},{"location":"eta/#purpose","title":"Purpose","text":"<p>The purpose of Enterprise Technical Architecture is to:</p> <ul> <li>Define approved and strategic technology standards that support business strategy.</li> <li>Provide governance and visibility across technology usage and lifecycle.</li> <li>Enable informed solution design through curated technology inventories.</li> <li>Manage technical debt and obsolescence proactively.</li> <li>Support innovation by introducing emerging technologies through controlled evaluation.</li> </ul>"},{"location":"eta/#key-concepts","title":"Key Concepts","text":"Concept Description Example Enterprise Technical Architecture (ETA) The high-level blueprint for technology domains, standards, and integrations that underpin business systems. Integration frameworks, API standards, identity solutions Technology Inventory A catalog of all technologies used across the enterprise, including their version, owner, lifecycle stage, and criticality. \u201cTechRadar\u201d, CMDB, or Technology Portfolio tool Technical Debt The implied cost of rework caused by taking shortcuts or using outdated technologies. Old frameworks, duplicated services, manual processes Technology Lifecycle Management A systematic approach to managing technology from introduction to retirement. TIME model (Tolerate, Invest, Migrate, Eliminate)"},{"location":"eta/#the-architects-responsibilities","title":"The Architect\u2019s Responsibilities","text":"<ul> <li>Assess and recommend technologies that align with enterprise standards.  </li> <li>Track technology usage within solutions to inform inventory accuracy.  </li> <li>Identify and quantify technical debt during design and review cycles.  </li> <li>Advise on lifecycle transitions (e.g., when a component should be retired or modernized).  </li> <li>Collaborate with Enterprise Architecture to influence the future technology roadmap.  </li> </ul>"},{"location":"eta/#technology-inventory-management","title":"Technology Inventory Management","text":""},{"location":"eta/#what-it-is","title":"What It Is","text":"<p>A technology inventory (or catalog) is a living repository of all technologies, platforms, and tools used in the organization. It serves as the single source of truth for what\u2019s in use, where, and by whom.</p>"},{"location":"eta/#what-to-capture","title":"What to Capture","text":"Attribute Description Technology / Product Name and version Domain / Category e.g., Database, Middleware, Security, Frontend Owner / Custodian Responsible team or business unit Lifecycle Stage Evaluate, Adopt, Maintain, Retire Risk / Compliance Status Approved, deprecated, or unapproved Dependencies Systems or applications using it Cost &amp; Licensing Optional \u2013 if relevant to decision making"},{"location":"eta/#tools-commonly-used","title":"Tools Commonly Used","text":"<ul> <li>Excel or SharePoint (basic)</li> <li>Architecture management tools (e.g., LeanIX, Ardoq, Bizzdesign)</li> <li>Technology Radar (custom GitHub or web implementation)</li> <li>CMDB integration for live system mapping</li> </ul>"},{"location":"eta/#managing-technology-lifecycle-time-model","title":"Managing Technology Lifecycle (TIME Model)","text":"<p>The TIME Model (Tolerate, Invest, Migrate, Eliminate) provides a clear lens for evaluating and managing technologies through their lifecycle.</p> Category Meaning Architect Action Tolerate Legacy or low-value tech still needed short-term Limit investment; plan exit strategy Invest Strategic technologies driving business value Prioritize for innovation and upskilling Migrate Useful but outdated technologies to transition Develop migration roadmap and business case Eliminate Obsolete or unsupported tech Decommission safely; ensure replacements exist <p>This model helps architects make data-driven decisions about where to focus modernization efforts and budget.</p>"},{"location":"eta/#technical-debt-management","title":"Technical Debt Management","text":""},{"location":"eta/#why-it-matters","title":"Why It Matters","text":"<p>Unchecked technical debt leads to: - Increased cost of change and maintenance. - Reduced agility and scalability. - Security and compliance risks. - Talent retention challenges (engineers dislike working with \u201cdead tech\u201d).</p>"},{"location":"eta/#architects-role","title":"Architect\u2019s Role","text":"<ol> <li>Identify Debt Early: Surface risks during design reviews or assessments.  </li> <li>Quantify Impact: Estimate cost, risk, and opportunity of remediation.  </li> <li>Prioritize Remediation: Balance quick wins with high-impact refactoring.  </li> <li>Track Debt: Use backlog tools or architecture repositories for visibility.  </li> <li>Build a Business Case: Translate technical debt into business impact \u2014 downtime, inefficiency, or missed innovation.</li> </ol>"},{"location":"eta/#categories-of-technical-debt","title":"Categories of Technical Debt","text":"<ul> <li>Code-level debt: Poor code quality or shortcuts.</li> <li>Architecture debt: Outdated patterns or poor modularization.</li> <li>Technology debt: Unsupported or end-of-life products.</li> <li>Process debt: Manual or non-automated delivery practices.</li> </ul>"},{"location":"eta/#integration-with-enterprise-governance","title":"Integration with Enterprise Governance","text":"<ul> <li>Architecture Review Boards (ARB): Should evaluate technology choices and debt remediation plans.</li> <li>Technology Standards Committees: Define and maintain approved technology stacks.</li> <li>Portfolio and Program Management: Align lifecycle management with funding and transformation roadmaps.</li> <li>Information Security and Compliance: Ensure lifecycle and debt considerations factor into risk assessments.</li> </ul>"},{"location":"eta/#recommended-practices","title":"Recommended Practices","text":"<ol> <li>Maintain a Technology Radar: Visualize technologies by adoption stage (Assess, Trial, Adopt, Retire).</li> <li>Automate Inventory Updates: Integrate with CMDB, cloud discovery, or IaC repositories.</li> <li>Review Annually: Conduct lifecycle reviews and flag end-of-support products.</li> <li>Include Debt in Planning: Treat technical debt as a managed investment, not hidden cost.</li> <li>Govern by Data: Use dashboards to show lifecycle health, risk, and technical debt trends.</li> </ol>"},{"location":"eta/#example-reporting-metrics","title":"Example Reporting Metrics","text":"Metric Description % of technologies in \u201cInvest\u201d state Indicator of modernization maturity # of end-of-life technologies in use Risk exposure metric Mean age of technology components Health of portfolio Technical debt ratio Effort to remediate debt vs. total system effort % of compliant technologies Governance adherence indicator"},{"location":"eta/#recommended-resources","title":"Recommended Resources","text":"<ul> <li>Microsoft Cloud Adoption Framework \u2013 Technology Management learn.microsoft.com/azure/cloud-adoption-framework/</li> <li>AWS Well-Architected Framework \u2013 Sustainability &amp; Operations Pillars aws.amazon.com/architecture/well-architected/</li> <li>Google Cloud Architecture Framework \u2013 Manage Technology Risk cloud.google.com/architecture/framework</li> <li>Gartner TIME Model Overview \u2013 Tolerate, Invest, Migrate, Eliminate lifecycle strategy.</li> <li>ThoughtWorks Technology Radar \u2013 Inspiration for visualizing technology lifecycles. thoughtworks.com/radar</li> </ul>"},{"location":"eta/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Architects are custodians of technology health \u2014 not just system designers.  </li> <li>A managed technology inventory provides visibility, compliance, and strategic control.  </li> <li>Technical debt must be measured, prioritized, and communicated in business terms.  </li> <li>The TIME model helps drive actionable lifecycle planning and modernization.  </li> <li>Continuous lifecycle management prevents architecture drift and enables innovation.</li> </ul>"},{"location":"influence/","title":"Influencing Without Authority","text":"<p>In today\u2019s interconnected and matrixed organizations, success for the modern architect often depends not on the power of your title, but on your ability to influence others without formal authority. Whether you\u2019re leading a cross-functional project, collaborating across departments, or driving innovation, the ability to persuade, align, and motivate people outside your direct control has become an essential leadership skill.</p>"},{"location":"influence/#what-it-means","title":"\ud83e\udd1d What It Means","text":"<p>Influencing without authority is the art of gaining support, shaping outcomes, and achieving results through trust, collaboration, and persuasion rather than positional power. It involves leveraging relationships, credibility, and communication to guide decisions and actions \u2014 even when you don\u2019t have the formal mandate to do so.</p>"},{"location":"influence/#key-principles","title":"\ud83e\udde0 Key Principles","text":""},{"location":"influence/#1-build-credibility","title":"1. Build Credibility","text":"<p>Your expertise, consistency, and reliability form the foundation of influence. When others trust your judgment and see your competence, they\u2019re more likely to follow your lead, even without direct reporting lines.</p>"},{"location":"influence/#2-cultivate-relationships","title":"2. Cultivate Relationships","text":"<p>Influence is built through connections, not commands. Invest time in understanding others\u2019 motivations, goals, and challenges. Show genuine interest and empathy \u2014 people are more open to influence when they feel understood and respected.</p>"},{"location":"influence/#3-align-on-shared-goals","title":"3. Align on Shared Goals","text":"<p>Find common ground. Reframe discussions around mutual benefits and organizational objectives instead of individual agendas. Alignment transforms competing interests into collaborative effort.</p>"},{"location":"influence/#4-communicate-with-impact","title":"4. Communicate with Impact","text":"<p>Tailor your message to your audience. Use storytelling, data, and empathy to make your case compelling. Influencing is as much about listening and adapting as it is about speaking.</p>"},{"location":"influence/#5-leverage-reciprocity","title":"5. Leverage Reciprocity","text":"<p>Offer help, share information, and provide value before seeking something in return. When others experience your generosity, they become more inclined to support your initiatives.</p>"},{"location":"influence/#6-navigate-organizational-dynamics","title":"6. Navigate Organizational Dynamics","text":"<p>Understand the informal networks and key stakeholders that shape decisions. Influence often flows through relationships rather than hierarchy \u2014 map these networks to engage the right voices.</p>"},{"location":"influence/#practical-techniques","title":"\ud83d\udca1 Practical Techniques","text":"<ul> <li>Ask Questions Before Making Requests \u2013 Understand what matters to others first.  </li> <li>Frame Ideas Around \u201cWhy\u201d \u2013 Connect proposals to broader business or team goals.  </li> <li>Co-Create Solutions \u2013 Involve others early so they feel ownership and commitment.  </li> <li>Use Data and Stories Together \u2013 Facts appeal to logic; stories appeal to emotion.  </li> <li>Celebrate Others\u2019 Contributions \u2013 Recognition fosters goodwill and partnership.</li> </ul>"},{"location":"influence/#the-leadership-mindset","title":"\ud83e\udded The Leadership Mindset","text":"<p>Influencing without authority is not about manipulation \u2014 it\u2019s about collaborative leadership. It reflects a growth mindset that values persuasion over power, empathy over ego, and partnership over position. Leaders who master this skill create environments where innovation thrives, silos break down, and people feel empowered to contribute their best.</p>"},{"location":"influence/#final-thoughts","title":"\ud83d\udcd8 Final Thoughts","text":"<p>In a world where hierarchy is flattening and teamwork crosses boundaries, influence is the new authority. By building trust, communicating effectively, and aligning people toward shared purpose, anyone \u2014 regardless of title \u2014 can lead meaningful change.</p>"},{"location":"influence/#key-takeaway","title":"\ud83d\udd11 Key Takeaway","text":"<p>Leadership today isn\u2019t defined by control \u2014 it\u2019s defined by your ability to inspire action and alignment without needing formal power.</p>"},{"location":"process/","title":"Solution Architecture Process","text":"<p>A generic listing of phases and activities that can be followed</p> <p>Acknowledgements: Nilseu Padilha</p> <ul> <li>Solution Architecture Delivery Process</li> <li>Phase: Solution Intake Process</li> <li>Phase: Solution Architecture Elaboration<ul> <li>Activity: E1 - Assess Strategic Architecture Gateway<ul> <li>Task: 01 - Assess EA Inputs</li> <li>Task: 02 - Understand Overall Value Streams</li> <li>Task: 03 - Understand Business Context</li> <li>Task: 04 - Understand Technical Landscape</li> <li>Task: 05 - Assess Innovation and IP value</li> </ul> </li> <li>Activity: E2 - Design Overall Solution<ul> <li>Task: 01 - Decompose Solution in Modules</li> <li>Task: 02 - Detail Overall Value Streams</li> <li>Task: 03 - Refine Overall Solution Design</li> <li>Task: 04 - Design Application Architecture</li> <li>Task: 05 - Design Data Architecture</li> <li>Task: 06 - Review Adherence to Enterprise Standards</li> <li>Task: 07 - Propose Spikes / Technical Enablers</li> </ul> </li> <li>Activity: E3 - Manage Stakeholders Communication<ul> <li>Task: 01 - Gather Stakeholder List</li> <li>Task: 02 - Establish Approval Chains</li> <li>Task: 03 - Establish Communication Channels</li> </ul> </li> <li>Activity: E4 - Manage Architecture Decisions<ul> <li>Task: 01 - Propose, Detail or Approve ADR's</li> </ul> </li> <li>Activity: E5 - Manage Risks and NFR's<ul> <li>Task: 01 - Manage Risks</li> <li>Task: 02 - Assess NFRs</li> <li>Task: 03 - Propose Spikes / Technical Enablers / ADR's</li> </ul> </li> <li>Activity: E6 - Manage Product Platform<ul> <li>Task: 01 - Support CI / CD</li> <li>Task: 02 - Support and Coordinate Observability</li> <li>Task: 03 - Coordinate with DevOps</li> <li>Task: 04 - Support Test Automation</li> <li>Task: 05 - Optimise Product Resources</li> <li>Task: 06 - Support Performance Engineering</li> <li>Task: 07 - Propose Spikes / Technical Enablers / ADR's</li> <li>Task: 08 - Tag and Register Application in Platform Management Repos</li> <li>Task: 09 - Monitor and Manage Application Vulnerabilities</li> </ul> </li> <li>Activity: E7 - Manage Product Security and Compliance<ul> <li>Task: 01 - Submit Security Architect Report</li> <li>Task: 02 - Submit Data Governance Report</li> <li>Task: 03 - Submit Data Encryption Report</li> <li>Task: 04 - Submit Disaster Recovery Report</li> <li>Task: 05 - Submit User Lifecycle Management Report</li> <li>Task: 06 - Submit AI Report</li> <li>Task: 07 - Submit Application Security Report</li> <li>Task: 08 - Submit Change Management Report</li> <li>Task: 09 - Submit SDLC Report</li> </ul> </li> </ul> </li> <li>Phase: Feature Solution Delivery Process (ITERATIVE)<ul> <li>Activity: F1 - Design Feature Solution Intent<ul> <li>Task: 01 - Run Impact Analysis</li> <li>Task: 02 - Collaborate with PO on System Use Cases / A/C</li> <li>Task: 03 - Collaborate with Application Architect / Tech Leaders</li> <li>Task: 04 - Collaborate with UX Designers</li> <li>Task: 05 - Address NFR's</li> <li>Task: 06 - Verify Adherence to Enterprise Standards</li> <li>Task: 07 - Review and Sign Off Application Architecture</li> <li>Task: 08 - Propose Spikes / Technical Enablers / ADR's</li> </ul> </li> <li>Activity: F2 - Manage Stakeholders</li> <li>Activity: F3 - Manage Architecture Decisions</li> <li>Activity: F4 - Risks and NFR's</li> <li>Activity: F5 - Manage Product Platform</li> <li>Activity: F6 - Submit Application for Security Review</li> </ul> </li> </ul>"},{"location":"solintent/","title":"The Solution Intent Document (SID)","text":""},{"location":"solintent/#overview","title":"Overview","text":"<p>A Solution Intent Document (SID) captures the architectural vision, context, and rationale behind a solution. It is not a detailed design document \u2014 it defines what the solution is intended to achieve, why it is being built that way, and how it aligns with enterprise architecture, strategy, and constraints.</p> <p>The SID provides a shared understanding between business, delivery, and technology stakeholders, ensuring all parties are aligned on scope, intent, and key decisions before deep technical design begins.</p>"},{"location":"solintent/#purpose","title":"Purpose","text":"<p>The Solution Intent Document serves to:</p> <ul> <li>Establish architectural intent \u2014 linking business needs to solution direction.  </li> <li>Provide traceability from strategy \u2192 requirements \u2192 architecture \u2192 delivery.  </li> <li>Define boundaries, constraints, and assumptions early in the lifecycle.  </li> <li>Communicate the solution\u2019s vision, scope, and principles clearly to all teams.  </li> <li>Act as a governance artifact for architecture review and approval.  </li> </ul>"},{"location":"solintent/#when-to-use","title":"When to Use","text":"<ul> <li>Early in solution definition or initiation phases.  </li> <li>During architecture review board (ARB) preparation.  </li> <li>As an input to detailed design, program planning, or RFP/vendor engagement.  </li> <li>As a baseline for architectural change control and traceability.  </li> </ul>"},{"location":"solintent/#core-sections-of-a-solution-intent-document","title":"Core Sections of a Solution Intent Document","text":"<p>The structure may vary across organizations, but a well-formed SID typically includes the following sections:</p>"},{"location":"solintent/#1-executive-summary","title":"1. Executive Summary","text":"<p>A concise, non-technical overview describing: - The business problem or opportunity being addressed. - The desired outcomes and strategic alignment. - The scope (what is included/excluded). - A high-level summary of the proposed solution direction.</p>"},{"location":"solintent/#2-business-context-and-drivers","title":"2. Business Context and Drivers","text":"<p>Defines why the solution exists.</p> <ul> <li>Key business objectives and expected benefits.  </li> <li>Pain points, gaps, or drivers prompting change.  </li> <li>Alignment to enterprise strategy, target operating model, or transformation roadmap.  </li> <li>Critical success factors and KPIs.  </li> </ul>"},{"location":"solintent/#3-solution-overview","title":"3. Solution Overview","text":"<p>Describes what the solution will do and its high-level architecture.</p> <ul> <li>Solution scope and capabilities.  </li> <li>Conceptual architecture diagram (context view).  </li> <li>Key components and integrations (with brief explanation).  </li> <li>Target users, consumers, or business units impacted.  </li> </ul> <p>Tip: Keep this at a conceptual level \u2014 leave implementation details for later design phases.</p>"},{"location":"solintent/#4-architecture-principles-and-approach","title":"4. Architecture Principles and Approach","text":"<p>Defines the guiding principles and approach that shape the solution.</p> <ul> <li>Architectural principles (e.g., cloud-first, API-first, reusable-by-default).  </li> <li>Technology alignment to enterprise standards or reference architectures.  </li> <li>Chosen patterns or styles (e.g., microservices, event-driven, serverless).  </li> <li>Governance alignment (Well-Architected, security baselines, compliance).</li> </ul>"},{"location":"solintent/#5-key-decisions-and-trade-offs","title":"5. Key Decisions and Trade-offs","text":"<p>Documents major architectural decisions, including rationale and implications.</p> <ul> <li>Decision summary (use ADRs for detail).  </li> <li>Trade-offs considered (e.g., build vs buy, platform selection).  </li> <li>Risks, mitigations, and outstanding decisions.  </li> </ul> <p>Purpose: Demonstrates transparency and architectural reasoning \u2014 not just the outcome.</p>"},{"location":"solintent/#6-constraints-and-assumptions","title":"6. Constraints and Assumptions","text":"<p>Lists known factors that influence solution design.</p> Type Example Business Constraint Must go live by Q4 to meet regulatory deadline Technical Constraint Must run on existing Azure landing zone Assumption SSO integration will be available via enterprise identity provider"},{"location":"solintent/#7-non-functional-requirements-nfrs","title":"7. Non-Functional Requirements (NFRs)","text":"<p>Captures the critical quality attributes of the solution \u2014 the \u201cilities\u201d.</p> Category Examples Performance Response &lt; 2s for 95% of requests Scalability Auto-scale to handle 10x seasonal traffic Availability 99.9% uptime Security Align with ISO27001 and CIS Benchmarks Maintainability Automated CI/CD deployment pipelines Observability Logging, tracing, and alerting integrated with monitoring tools"},{"location":"solintent/#8-technology-stack-and-dependencies","title":"8. Technology Stack and Dependencies","text":"<p>Outlines the proposed technology components and dependencies.</p> <ul> <li>Platforms, services, and products being used (with version or lifecycle info).  </li> <li>Reuse of approved enterprise technologies.  </li> <li>Identification of new or non-standard technologies (with rationale).  </li> <li>Dependency mapping (internal and external systems).  </li> </ul> <p>Integrate with your Technology Inventory and TIME model for lifecycle visibility.</p>"},{"location":"solintent/#9-data-and-integration-considerations","title":"9. Data and Integration Considerations","text":"<p>Summarizes how the solution will handle data and interoperate.</p> <ul> <li>Key data entities, flows, and storage considerations.  </li> <li>Integration approach (APIs, events, messaging, ETL).  </li> <li>Data security, privacy, and compliance implications (e.g., GDPR).  </li> </ul>"},{"location":"solintent/#10-deployment-and-environment-strategy","title":"10. Deployment and Environment Strategy","text":"<p>Describes how and where the solution will be deployed.</p> <ul> <li>Cloud provider or hosting model.  </li> <li>Environment model (dev, test, staging, production).  </li> <li>Deployment and release approach (manual vs CI/CD).  </li> <li>High-level operational ownership (run/support model).</li> </ul>"},{"location":"solintent/#11-risks-and-mitigations","title":"11. Risks and Mitigations","text":"<p>Identifies key risks and proposed mitigations.</p> Risk Impact Likelihood Mitigation Integration latency Medium High Introduce caching and async messaging Vendor lock-in High Medium Use abstraction layer for portability Legacy dependency High High Create modernization roadmap"},{"location":"solintent/#12-alignment-and-governance","title":"12. Alignment and Governance","text":"<p>Specifies how the solution aligns with enterprise governance.</p> <ul> <li>Related reference architectures or patterns used.  </li> <li>Enterprise architecture domain alignment (e.g., Data, Integration, Security).  </li> <li>Architecture Review Board (ARB) status and approvals.  </li> <li>Compliance with standards and policies.  </li> </ul>"},{"location":"solintent/#13-future-state-and-lifecycle-considerations","title":"13. Future State and Lifecycle Considerations","text":"<p>Captures how the solution will evolve over time.</p> <ul> <li>Anticipated growth or expansion areas.  </li> <li>Known limitations or planned enhancements.  </li> <li>Technology lifecycle position (using the TIME model \u2014 Tolerate, Invest, Migrate, Eliminate).  </li> <li>Sunset strategy for replaced systems.</li> </ul>"},{"location":"solintent/#14-appendices","title":"14. Appendices","text":"<p>Include supporting materials such as: - Detailed diagrams (C4 model, sequence, deployment). - Architecture Decision Records (ADRs). - Glossary of terms. - References to related documents (Business Case, Security Review, NFR Traceability Matrix).</p>"},{"location":"solintent/#recommended-practices","title":"Recommended Practices","text":"<ul> <li>Keep it concise: Focus on intent and rationale, not exhaustive detail.  </li> <li>Use visuals: Diagrams and tables communicate faster than text.  </li> <li>Version control: Maintain in Git or Confluence with version history.  </li> <li>Link, don\u2019t duplicate: Reference related documentation rather than copy content.  </li> <li>Review and update: Revisit during major milestones or design changes.  </li> </ul>"},{"location":"solintent/#recommended-tools-and-templates","title":"Recommended Tools and Templates","text":"<ul> <li>Markdown + GitHub / Azure DevOps Wiki: Lightweight, version-controlled documentation.  </li> <li>Confluence: Centralized collaboration with templates and diagrams.  </li> <li>Draw.io / Lucidchart / PlantUML: Architecture diagramming tools.  </li> <li>ADR Tools: For structured decision logging (e.g., <code>adr-tools</code>, <code>log4brains</code>).  </li> </ul>"},{"location":"solintent/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>The Solution Intent Document captures why and what, not every detail of how.  </li> <li>It is the anchor document for architecture alignment, decision traceability, and stakeholder communication.  </li> <li>The SID ensures solutions remain strategically aligned, technically sound, and operationally feasible before detailed design begins.  </li> <li>Keep it living \u2014 the SID evolves as the solution and understanding mature.  </li> </ul>"},{"location":"stakeholders/","title":"Stakeholder Management for Solution Architects","text":""},{"location":"stakeholders/#overview","title":"Overview","text":"<p>Effective stakeholder management is one of the most critical \u2014 and often underestimated \u2014 competencies of a Solution Architect. Projects succeed or fail not only on technical merit, but on how well the architect engages, aligns, and communicates with the people who influence, deliver, and consume the solution.</p>"},{"location":"stakeholders/#purpose","title":"Purpose","text":"<p>The goal of stakeholder management is to identify, understand, and influence the people and groups who impact your architecture \u2014 directly or indirectly. It ensures that architecture decisions are not made in isolation but are grounded in organizational context, constraints, and priorities.</p> <p>Key outcomes: - Aligned expectations across business, delivery, and technology teams. - Early identification of risks and constraints. - Better adoption and reduced resistance to architectural change. - Clear ownership and accountability across stakeholders.</p>"},{"location":"stakeholders/#the-architects-role-with-stakeholders","title":"The Architect\u2019s Role with Stakeholders","text":"Role Description Typical Stakeholders Advisor Translate business goals into technical realities; guide trade-offs. Business sponsors, product owners Integrator Align multiple teams, technologies, and vendors into a cohesive architecture. Domain architects, platform owners Negotiator Balance competing priorities (cost, performance, timelines, security). Project managers, delivery leads Communicator Present complex ideas simply; tailor the message to the audience. Executives, developers, operations Leader Drive consensus, decisions, and ownership around the architecture vision. All stakeholders"},{"location":"stakeholders/#stakeholder-management-process","title":"Stakeholder Management Process","text":""},{"location":"stakeholders/#1-identify-stakeholders","title":"1. Identify Stakeholders","text":"<ul> <li>Create a stakeholder map early in the project.</li> <li>Include both influencers (decision-makers) and impacted parties (users, maintainers).</li> <li>Classify by role, power, and interest.</li> </ul> <p>Example categories: - Executive Sponsors - Business Owners - Delivery/Project Managers - Product Owners - Developers / Engineers - Operations / Security Teams - Enterprise Architecture / Governance - External Vendors or Partners</p>"},{"location":"stakeholders/#2-analyze-influence-and-interest","title":"2. Analyze Influence and Interest","text":"<p>Use a Power\u2013Interest Matrix:</p> Power Interest Strategy High High Manage closely (primary stakeholders) High Low Keep satisfied Low High Keep informed Low Low Monitor only <p>Focus effort on high power\u2013high interest stakeholders; these are your success enablers (or blockers).</p>"},{"location":"stakeholders/#3-engage-and-communicate","title":"3. Engage and Communicate","text":"<p>Golden rule: Tailor your message to your audience.</p> Audience Preferred Communication Focus Area Executives Briefings, summaries Business outcomes, risk, cost Product / Delivery Teams Working sessions Trade-offs, timelines, constraints Engineers Technical reviews, diagrams Detail, feasibility, implementation Governance / Security Formal design reviews Compliance, policy adherence <p>Tips: - Use visuals \u2014 diagrams, architecture views, and roadmaps beat text walls. - Avoid jargon unless it fits the audience. - Be transparent \u2014 acknowledge trade-offs and decisions clearly. - Maintain a communication log (simple table or Confluence page) to track updates and agreements.</p>"},{"location":"stakeholders/#4-manage-expectations-and-decisions","title":"4. Manage Expectations and Decisions","text":"<ul> <li>Use Architecture Decision Records (ADRs) to document key decisions and rationale.</li> <li>Capture stakeholder sign-off on major design choices.</li> <li>Avoid \u201csilent assumptions\u201d \u2014 verify understanding and alignment regularly.</li> <li>Escalate early when trade-offs can\u2019t be balanced at your level.</li> </ul>"},{"location":"stakeholders/#5-monitor-and-adapt","title":"5. Monitor and Adapt","text":"<ul> <li>Stakeholder needs and influence change over time \u2014 revisit your stakeholder map each project phase.</li> <li>Maintain ongoing engagement, especially through transitions (design \u2192 delivery \u2192 operations).</li> <li>Conduct post-implementation reviews to collect feedback for continuous improvement.</li> </ul>"},{"location":"stakeholders/#common-pitfalls-and-how-to-avoid-them","title":"Common Pitfalls (and How to Avoid Them)","text":"Pitfall Result Fix Ignoring non-technical stakeholders Misalignment and rework Include business and delivery roles early Overloading with technical detail Confusion or disengagement Match message to audience Underestimating informal influence Unseen blockers Map power dynamics, not just org charts Treating stakeholder mgmt as \u201csoft work\u201d Broken trust and delayed delivery Treat it as core architecture work Not documenting agreements \u201cHe said, she said\u201d situations Record and share all architectural decisions"},{"location":"stakeholders/#practical-tools-templates","title":"Practical Tools &amp; Templates","text":"<ul> <li>Stakeholder Map Template: A table listing stakeholder name, role, influence, interest, and engagement plan.</li> <li>Communication Plan: Defines meeting cadence, communication methods, and responsibilities.</li> <li>Architecture Decision Record (ADR): Simple Markdown or Confluence template for documenting design decisions.</li> <li>RACI Matrix: Defines who is Responsible, Accountable, Consulted, Informed for major architecture outcomes.</li> </ul>"},{"location":"stakeholders/#recommended-resources","title":"Recommended Resources","text":"<ul> <li>TOGAF 10: Architecture Stakeholder Management \u2014 Framework section on stakeholder analysis and engagement.</li> <li>PMI Stakeholder Engagement Standard \u2014 Structured process for managing expectations and influence.</li> <li>AWS Prescriptive Guidance \u2013 Stakeholder Management for Cloud Transformation aws.amazon.com/prescriptive-guidance</li> <li>Microsoft Cloud Adoption Framework \u2013 Stakeholder Alignment learn.microsoft.com/azure/cloud-adoption-framework/strategy/stakeholders</li> <li>Google Cloud Adoption Framework \u2013 Organizational Alignment cloud.google.com/adoption-framework</li> </ul>"},{"location":"stakeholders/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Stakeholder management is architecture work \u2014 not administration.</li> <li>The best architectures fail if not communicated and agreed upon.</li> <li>Clear, consistent, and respectful engagement turns potential blockers into allies.</li> <li>Every diagram and decision should tell a story your stakeholders understand.</li> </ul>"}]}